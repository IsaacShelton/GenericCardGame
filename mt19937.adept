
// 32-bit implementation of MT19937 pseudo random number generator
// Ported from https://svn.mcs.anl.gov/repos/ZeptoOS/trunk/Selfish/detour/twister.c
// Licensed under GPL2 or later

#default MT_19937_COMPILE_EXAMPLE false

MT19937_MAX == 4294967295 // maximum possible random value (inclusive)
MT19937_N == 624ui // length of state vector
MT19937_M == 397ui // a period parameter
MT19937_K == 0x9908B0DFui // a magic constant

func mt19937HiBit(u uint) uint = u & 0x80000000ui  // mask all but highest   bit of u
func mt19937LoBit(u uint) uint = u & 0x00000001ui  // mask all but lowest    bit of u
func mt19937LoBits(u uint) uint = u & 0x7FFFFFFFui // mask     the highest   bit of u
func mt19937MixBits(u, v uint) uint = mt19937HiBit(u) | mt19937LoBits(v) // move hi bit of u to hi bit of v

struct MT19937InternalState (state *uint, next *uint, left int)

func __defer__(this *MT19937InternalState) {
    delete this.state
}

func mt19937CreateInternalState MT19937InternalState {
    internal_state POD MT19937InternalState = undef
    internal_state.state = new undef uint * (MT19937_N + 1) // state vector + 1 extra to not violate ANSI C
    internal_state.next = null                               // next random value is computed from here
    internal_state.left = -1                                 // can *next++ this many times before reloading
    return internal_state
}

mt19937_internal_state MT19937InternalState = mt19937CreateInternalState()

func mt19937Seed(seed uint) {
    //
    // We initialize state[0..(N-1)] via the generator
    //
    //   x_new = (69069 * x_old) mod 2^32
    //
    // from Line 15 of Table 1, p. 106, Sec. 3.3.4 of Knuth's
    // _The Art of Computer Programming_, Volume 2, 3rd ed.
    //
    // Notes (SJC): I do not know what the initial state requirements
    // of the Mersenne Twister are, but it seems this seeding generator
    // could be better.  It achieves the maximum period for its modulus
    // (2^30) iff x_initial is odd (p. 20-21, Sec. 3.2.1.2, Knuth); if
    // x_initial can be even, you have sequences like 0, 0, 0, ...;
    // 2^31, 2^31, 2^31, ...; 2^30, 2^30, 2^30, ...; 2^29, 2^29 + 2^31,
    // 2^29, 2^29 + 2^31, ..., etc. so I force seed to be odd below.
    //
    // Even if x_initial is odd, if x_initial is 1 mod 4 then
    //
    //   the          lowest bit of x is always 1,
    //   the  next-to-lowest bit of x is always 0,
    //   the 2nd-from-lowest bit of x alternates      ... 0 1 0 1 0 1 0 1 ... ,
    //   the 3rd-from-lowest bit of x 4-cycles        ... 0 1 1 0 0 1 1 0 ... ,
    //   the 4th-from-lowest bit of x has the 8-cycle ... 0 0 0 1 1 1 1 0 ... ,
    //    ...
    //
    // and if x_initial is 3 mod 4 then
    //
    //   the          lowest bit of x is always 1,
    //   the  next-to-lowest bit of x is always 1,
    //   the 2nd-from-lowest bit of x alternates      ... 0 1 0 1 0 1 0 1 ... ,
    //   the 3rd-from-lowest bit of x 4-cycles        ... 0 0 1 1 0 0 1 1 ... ,
    //   the 4th-from-lowest bit of x has the 8-cycle ... 0 0 1 1 1 1 0 0 ... ,
    //    ...
    //
    // The generator's potency (min. s>=0 with (69069-1)^s = 0 mod 2^32) is
    // 16, which seems to be alright by p. 25, Sec. 3.2.1.3 of Knuth.  It
    // also does well in the dimension 2..5 spectral tests, but it could be
    // better in dimension 6 (Line 15, Table 1, p. 106, Sec. 3.3.4, Knuth).
    //
    // Note that the random number user does not see the values generated
    // here directly since reloadMT() will always munge them first, so maybe
    // none of all of this matters.  In fact, the seed values made here could
    // even be extra-special desirable if the Mersenne Twister theory says
    // so-- that's why the only change I made is to restrict to odd seeds.
    //
    
    x uint = (seed | 1ui) & 0xFFFFFFFFui
    s *uint = mt19937_internal_state.state
    l *int = &mt19937_internal_state.left
    
    *l = 0si
    *s = x
    s = s as ptr + sizeof uint as ptr
    j int = MT19937_N
    
    while --j {
        x *= 69069ui
        *s = x & 0xFFFFFFFFui
        s = s as ptr + sizeof uint as ptr
    }
}

func mt19937Reload() uint {
    p0 *uint = mt19937_internal_state.state
    p2 *uint = p0 as ptr + (2uz * sizeof uint) as ptr
    pM *uint = p0 as ptr + (MT19937_M * sizeof uint) as ptr
    s0, s1 uint = undef
    
    j int = undef
    l *int = &mt19937_internal_state.left
    s *uint = p0
    
    if *l < -1si, mt19937Seed(4357ui)
    
    *l = MT19937_N - 1ui
    mt19937_internal_state.next = s as ptr + sizeof uint as ptr
    
    s0 = s[0uz]
    s1 = s[1uz]
    j = MT19937_N - MT19937_M + 1ui
    
    while --j {
        *p0 = *pM ^ (mt19937MixBits(s0, s1) >> 1ui) ^ (mt19937LoBit(s1) ? MT19937_K : 0ui)
        p0 = p0 as ptr + sizeof uint as ptr
        pM = pM as ptr + sizeof uint as ptr
        
        s0 = s1
        s1 = *p2
        p2 = p2 as ptr + sizeof uint as ptr
    }
    
    pM = s
    j = MT19937_M
    while --j {
        *p0 = *pM ^ (mt19937MixBits(s0, s1) >> 1ui) ^ (mt19937LoBit(s1) ? MT19937_K : 0ui)
        p0 = p0 as ptr + sizeof uint as ptr
        pM = pM as ptr + sizeof uint as ptr
        
        s0 = s1
        s1 = *p2
        p2 = p2 as ptr + sizeof uint as ptr
    }
    
    s1 = s[0uz]
    *p0 = (*pM) ^ (mt19937MixBits(s0, s1) >> 1ui) ^ (mt19937LoBit(s1) ? MT19937_K : 0ui)
    s1 ^= (s1 >> 11ui)
    s1 ^= (s1 <<  7ui) & 0x9D2C5680ui
    s1 ^= (s1 << 15ui) & 0xEFC60000ui
    return s1 ^ (s1 >> 18ui)
}

func mt19937Random() uint {
    y uint = undef
    l *int = &mt19937_internal_state.left
    n **uint = &mt19937_internal_state.next
    
    if --(*l) < 0, return mt19937Reload()
    
    y = *(*n)
    *n = *n as ptr + sizeof uint as ptr
    y ^= (y >> 11ui)
    y ^= (y <<  7ui) & 0x9D2C5680ui
    y ^= (y << 15ui) & 0xEFC60000ui
    return y ^ (y >> 18ui)
}

#if MT_19937_COMPILE_EXAMPLE
    pragma project_name 'mt19937'
    import 'sys/cstdio.adept'
    
    func main {
        mt19937Seed(4357ui)
        
        repeat 2002,
            printf(' %10lu%s', mt19937Random(), idx % 7 == 6 ? '\n' : '');
    }
#end


import 'main.adept'
import 'Offense.adept'
import 'Defense.adept'

import 'CardTraits.adept'
import 'CardBlueprint.adept'
import 'CardKind.adept'
import 'CardPosition.adept'

alias CardInstanceID = usize
alias CardNetworkID  = usize

struct CardInstance (
    instance_id CardInstanceID,
    network_id CardNetworkID,
    name, title, description String,
    kind CardKind,
    cost, hp, max_hp, attack int,
    offense Offense,
    defense Defense,
    ct CardTextures,
    traits CardTraits
) {
    func __assign__(other CardInstance) {
        this.instance_id = other.instance_id
        this.network_id = other.network_id
        this.name = other.name.clone()
        this.title = other.title.clone()
        this.description = other.description.clone()
        this.kind = other.kind
        this.cost = other.cost
        this.hp = other.hp
        this.max_hp = other.max_hp
        this.attack = other.attack
        this.offense = POD other.offense
        this.defense = POD other.defense
        this.ct = other.ct
        this.traits = other.traits
    }
    
    func clone CardInstance {
        instance POD CardInstance = *this
        return instance
    }
    
    func getStandardCardTexture CaptTexture {
        switch this.kind {
        case CardKind::CREATURE, return textures.standard_creature_card
        case CardKind::SPELL,    return textures.standard_spell_card
        case CardKind::STAT,     return textures.standard_stat_card
        case CardKind::TRAP,     return textures.standard_trap_card
        }
        return textures.standard_card
    }
    
    func print {
        print("% instance_id % network_id %" % this.name % this.instance_id % this.network_id)
        print(" title: %" % this.title)
        print(" description: %" % this.description)
        print(" kind: %" % toString(this.kind))
        print(" cost: %" % this.cost)
        print(" hp: %/%" % this.hp % this.max_hp)
        print(" attack: %" % this.attack)
        print(" offense: %" % this.offense.toString())
        print(" defense: %" % this.defense.toString())
        print(" textures: %" % (this.ct.portrait != &textures.placeholder))
        print(" traits: %" % this.traits.toString(false))
    }
    
    func assignNetworkID(network_id CardNetworkID) {
        this.network_id = network_id
    }
    
    func heal(amount int) successful {
        // NOTE: Returns whether any healing was done
        
        // Cannot heal if marked as unhealable
        if this.traits.unhealable, return false
        
        // Cannot heal if already at maximum HP
        if this.hp >= this.max_hp, return false
        
        // Heal no more than up to maximum HP
        this.hp = min(this.hp + amount, this.max_hp)
        return true
    }
    
    func isDead bool = this.hp <= 0
    func isSad bool {
        if this.traits.on_fire && !this.traits.fire_resistant, return true
        return false
    }
    func isDancing bool = this.traits.dancing > 0
}

func cardInstance(blueprint *CardBlueprint) CardInstance {
    instance POD CardInstance
    instance.instance_id = gamedata.next_instance_id++
    instance.name = blueprint.name.clone()
    instance.title = blueprint.title.clone()
    instance.description = blueprint.description.clone()
    instance.kind = blueprint.kind
    instance.cost = blueprint.cost
    instance.hp = blueprint.hp
    instance.max_hp = blueprint.hp
    instance.attack = blueprint.attack
    instance.offense = POD blueprint.offense
    instance.defense = POD blueprint.defense
    instance.ct = blueprint.ct
    instance.traits = blueprint.traits
    return instance
}

func contains(this *<CardNetworkID> List, network_id CardNetworkID) bool {
    each CardNetworkID in static *this, if it == network_id, return true
    return false
}

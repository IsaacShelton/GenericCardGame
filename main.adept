
pragma compiler_version '2.3'

#default release                  false

#default fullscreen               true
#default monitor_fps              false
#default ignore_NAME_txt          false
#default no_music                 false
#default enable_music_hotkeys     true
#default enable_debugging_hotkeys false
#default enable_credits_hd_hover  false
#default auto_name                false
#default use_mt19937              true

#unless release
    #print "[BUILD] Using develop configuration..."
    #set fullscreen false
    #set ignore_NAME_txt true
    #set auto_name true
    #set no_music true
    #set enable_debugging_hotkeys true
    #set settings_immutable true
#end

import '2.3/basics.adept'
import '2.3/captain.adept'
import '2.3/List.adept'
import '2.3/Matrix4f.adept'
import '2.3/audio.adept'

import 'random.adept'
import 'NetworkManager.adept'
import 'NetworkInterpreter.adept'
import 'RoomListing.adept'
import 'GameData.adept'
import 'Textures.adept'
import 'Scene.adept'
import 'Text.adept'
import 'where.adept'
import 'strings.adept'
import 'csignal.adept'
import 'lines.adept'
import 'SoundTrack.adept'
import 'SoundEffects.adept'
import 'Loader.adept'
import 'Settings.adept'

func main(argc int, argv **ubyte) {
    repeat static argc - 1 {
        arg String = stringConstant(argv[idx + 1])
        if      arg.startsWith("--host="), gamedata.override_host = arg.decapitated(7)
        else if arg.startsWith("--port="), gamedata.override_port = arg.decapitated(7)
        else    print("bad argument: %" % arg)
    }
    
    unless gamedata.override_host.empty(), print("OVERRIDE: override_host=%" % gamedata.override_host)
    unless gamedata.override_port.empty(), print("OVERRIDE: override_port=%" % gamedata.override_port)
    
    captOnSetup(func &onSetup)
    captOnExit(func &onExit)
    captOnStep(func &onStep, 60)
    captOnClick(func &onClick, true)
    captOnRelease(func &onRelease, true)
    captOnKey(func &onKey)
    captOnChar(func &onChar)
    captOnScroll(func &onScroll)
    captOnDraw(func &onDraw)
    captMultisample(4)
    
    #if fullscreen
    captStart('Generic Card Game', true)
    #else
    captStart('Generic Card Game', 1280, 720, false)
    #end
}

func onSetup {
    signal(SIGPIPE, SIG_IGN)
    audioInit()
    textures.load()
    settings.load()
    loader.create()
}

func onExit {
    loader.stop()
    loader.destroy()
    
    textures.unload()
    dynamic_textures.unload()
    gamedata.exit()
    sfx.unload()
    soundtrack.stop()
    soundtrack.destroy()
    audioTerminate()
}

func onStep {
    if loader.didFinishLoading() {
        soundtrack.start()
        gamedata.loadDeck()
        settings.apply()
    }
    
    if loader.isComplete() {
        gamedata.step()
        soundtrack.update()
        sfx.update()
    }
}

func onClick(x, y float, button int) {
    if loader.isComplete(), gamedata.click(x, y, button)
}

func onRelease(x, y float, button int) {
    if loader.isComplete(), gamedata.release(x, y, button)
}

func onKey(key, scancode, action, mods int) {
    unless loader.isComplete(), return
    
    gamedata.key(key, scancode, action, mods)
    
    #if enable_music_hotkeys
    if key == GLFW_KEY_SPACE && action == GLFW_PRESS && mods & GLFW_MOD_CONTROL, soundtrack.fadeOutIntoNextSong()
    if key == GLFW_KEY_M && action == GLFW_PRESS && mods & GLFW_MOD_CONTROL, soundtrack.toggle()
    if key == GLFW_KEY_N && action == GLFW_PRESS && mods & GLFW_MOD_CONTROL, sfx.toggle()
    #end
}

func onChar(c uint) {
    if loader.isComplete(), gamedata.char(c)
}

func onScroll(x float, y float) {
    if loader.isComplete(), gamedata.scroll(x, y)
}

func onDraw {
    captClearColor(captColor(0.75f, 0.75f, 0.75f))
    captDrawTexture(textures.background, 0.0f, 0.0f, captViewWidth(), captViewHeight())
    
    if loader.isComplete(), gamedata.draw()
    else {
        loader.drawLoadingAnimation()
    }
}

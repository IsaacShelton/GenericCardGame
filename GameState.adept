
import 'main.adept'
import 'Card.adept'
import 'Deck.adept'
import 'Phase.adept'
import 'CardStatus.adept'
import 'SpellOrder.adept'
import 'AttackOrder.adept'
import 'Player.adept'
import 'TrapCardInstance.adept'

struct GameState (
    phase Phase,
    next_player_id PlayerID,
    global_mana int,
    global_dancing int,
    players <Player> List,
    spell_orders <SpellOrder> List,
    attack_orders <AttackOrder> List,
    trap_cards <TrapCardInstance> List
) {
    func init(player_names <String> List) {
        this.phase = phase(PhaseKind::SPAWN)
        this.next_player_id = 1
        this.global_mana = player_names.length
        this.global_dancing = 0
        
        this.players.clear()
        each player_name String in player_names, this.addPlayer(player_name)
        this.attack_orders.clear()
        
        this.distributeMana()
    }
    
    func addPlayer(name String) {
        new_player *Player = this.players.addPlayer(this.next_player_id++, name)
        new_player.drawCardsFromDeck(3, name == gamedata.player_name, this.global_mana)
    }
    
    func getPlayer(name String) *Player {
        each Player in this.players, if it.name == name, return &it
        
        print("ERROR: GameState.getPlayer(String) failed to find player '%'" % name)
        print("       (returning null)")
        return null
    }
    
    func getPlayer(player_id PlayerID) *Player {
        each Player in this.players, if it.player_id == player_id, return &it
        
        print("ERROR: GameState.getPlayer(PlayerID) failed to find player %" % player_id)
        print("       (returning null)")
        return null
    }
    
    func getThisPlayer *Player = this.getPlayer(gamedata.player_name)
    
    func getMyCard(instance_id CardInstanceID) *CardInstance {
        me *Player = this.getThisPlayer()
        unless me, return null
        
        each CardInstance in me.hand,
            if it.instance_id == instance_id, return &it
        
        return null
    }
    
    func getRidOfMyCardInHand(instance_id CardInstanceID) successful {
        me *Player = this.getThisPlayer()
        unless me, return false
        
        each CardInstance in me.hand {
            if it.instance_id == instance_id {
                me.hand.remove(idx)
                return true
            }
        }
        
        return false
    }
    
    func getOpponent *Player {
        each Player in this.players, unless it.name == gamedata.player_name, return &it
        
        print("ERROR: GameState.getOpponent() failed to find opponent")
        print("       (returning null)")
        return null
    }
    
    func getCardOnBoardByNetworkId(network_id CardNetworkID) *CardInstance {
        each player Player in static this.players {
            instance *CardInstance = player.getCardOnBoardByNetworkId(network_id)
            if instance, return instance
        }
        return null
    }
    
    func willAdvancePhase bool {
        if this.players.length == 0, return false
        each Player in this.players, unless it.done, return false
        return true
    }
    
    func shouldAdvancePhase bool {
        unless this.willAdvancePhase(), return false
        
        this.phase.advance()
        each Player in this.players, it.done = false; it.sent_done = false
        
        switch this.phase.kind {
        case PhaseKind::SPAWN
            this.distributeMana()
            this.reduceTimedEffects()
        }
        
        if this.phase.kind != PhaseKind::BATTLE,
            this.attack_orders.clear()
        
        // attack-equals-hp
        each player Player in this.players, each CardInstance in player.board, if it.traits.attack_equals_hp {
            it.attack = it.hp
        }
        
        return true
    }
    
    func distributeMana {
        each Player in this.players {
            it.mana = it.future_extra_mana + it.getManaAllowance(this.global_mana)
            it.future_extra_mana = 0
        }
    }
    
    func doDrawPhase {
        each Player in this.players {
            cards_to_draw usize = it.starting_hearts < it.hearts ? 1 : it.starting_hearts - it.hearts + 1
            it.drawCardsFromDeck(cards_to_draw, it.name == gamedata.player_name, this.global_mana)
        }
    }
    
    func doAttack(aggressor *CardInstance, inout victim_var **CardInstance, out particles *<*CardParticle> List, randomness int, is_counter_attack bool) successful {
        used_shield bool = false
        victim *CardInstance = *victim_var
        attack int = aggressor.attack
        aggressor_owner *Player = this.findOwner(aggressor.network_id)
        victim_owner *Player = this.findOwner(victim.network_id)
        
        // dancing => You can't attack while dancing!
        // (Shouldn't be necessary, but good to check)
        if aggressor.traits.dancing, return false
        
        // random-victim
        if aggressor.traits.random_victim {
            // TODO: Make victim determination less correlated with other random events
            if victim_owner {
                *victim_var = victim_owner.board.getPointer(randomness % victim_owner.board.length)
                victim = *victim_var
            }
        }
        
        // rage
        if aggressor.traits.rage {
            // TODO: Make victim determination less correlated with other random events
            if victim_owner && victim_owner.board.length > 1 {
                initial_victim_index usize = 0
                
                // Find index which initial victim is holding
                each CardInstance in static victim_owner.board {
                    if it.network_id == victim.network_id {
                        initial_victim_index = idx
                        break
                    }
                }
                
                // Select a victim that isn't the target
                new_victim_index usize = randomness % (victim_owner.board.length - 1)
                if new_victim_index >= initial_victim_index, new_victim_index++
                
                *victim_var = victim_owner.board.getPointer(new_victim_index)
                victim = *victim_var
            }
            
            attack = cast int (attack as double * 1.5)
        }
        
        // Trigger 'on-attack' traps
        should_reflect bool = false
        each TrapCardInstance in this.trap_cards {
            if it.rigged == victim.network_id && it.traits.activation.kind == CardActivationKind::ON_ATTACK {
                this.doTrap(&it, aggressor, particles, &should_reflect)
                this.trap_cards.remove(idx--)
            }
        }
        
        victim_was_dead bool = victim.isDead()
        
        // can-heal
        if (aggressor.traits.can_heal || aggressor.traits.only_heal) && aggressor_owner == victim_owner {
            victim.heal(aggressor.attack)
            if particles, particles.addHealing(victim.network_id)
            
            // raise-attack
            if aggressor.traits.raise_attack, victim.attack += aggressor.traits.raise_attack
            return true
        }
        
        // applies-resistance (via spell / creature card)
        total_resistance int = victim.traits.resistance
        
        // applies-attack (via stat card)
        if aggressor_owner && aggressor_owner.stat_card.has && aggressor_owner.stat_card.getPointer().traits.applies_attack {
            attack += aggressor_owner.stat_card.getPointer().traits.applies_attack
        }
        
        // applies-resistance (via stat card)
        if victim_owner && victim_owner.stat_card.has && victim_owner.stat_card.getPointer().traits.applies_resistance {
            total_resistance += victim_owner.stat_card.getPointer().traits.applies_resistance
        }
        
        // applies-resistance (total)
        if total_resistance != 0 {
            attack = max(attack - total_resistance, 0)
            if particles, particles.addResistance(victim.network_id)
        }
        
        invulnerable_to_attack bool = (
            (victim.traits.invulnerable_to_blunt && aggressor.offense.kind == OffenseKind::BLUNT) ||
            (victim.traits.resistant_over != 0 && attack > victim.traits.resistant_over)
        )
        
        // Make victim invulnerable if must be attacked last and not the last card
        if victim.traits.must_be_attacked_last && !invulnerable_to_attack && !aggressor.traits.ignores_attack_order {
            is_last bool = true
            if victim_owner, each CardInstance in static victim_owner.board {
                unless it.traits.must_be_attacked_last || it.isDead(), is_last = false; break
            }
            unless is_last, invulnerable_to_attack = true
        }
        
        // Make victim invulnerable if not must be attacked first and friend exists that must be attacked first
        if !invulnerable_to_attack && !victim.traits.must_be_attacked_first && !aggressor.traits.ignores_attack_order {
            each CardInstance in static victim_owner.board {
                if it.traits.must_be_attacked_first && !it.isDead(), invulnerable_to_attack = true; break
            }
        }
        
        if invulnerable_to_attack {
            // For now, let's just act that since we are invulnerable to attack,
            // Nothing else from the attack applies
            return false
        }
        
        if victim.traits.shield > 0 {
            victim.traits.shield--
            
            if particles, particles.addPopupShield(victim.network_id)
            used_shield = true
            
            // For now, let's just act that since the shield came into play,
            // Nothing else from the attack applies
            return false
        }
        
        final_damage_dealt int = 0
        
        if victim.traits.endure > 0 && victim.hp > 0 && attack >= victim.hp && victim.hp > victim.traits.endure {
            // Endure
            final_damage_dealt = victim.hp - victim.traits.endure
        } else {
            // Regular damage
            final_damage_dealt = attack
        }
        
        // Reflect damage if trap activated reflect
        if should_reflect {
            aggressor.hp = max(aggressor.hp - final_damage_dealt, 0)
        } else {
            victim.hp -= final_damage_dealt
            
            // Add super meter bonus if proper offense for defense
            if aggressor.offense.isGoodAgainst(victim.defense),
                aggressor_owner.super = clamp(aggressor_owner.super + 5, 0, 100)
        }
        
        // Spread fire to victim if should
        if aggressor.traits.spreads_fire && !victim.traits.fire_resistant {
            if randomness < aggressor.traits.spreads_fire,
                victim.traits.on_fire = true
        }
        
        // cause-burning (via stat card)
        if aggressor_owner && aggressor_owner.stat_card.has && aggressor_owner.stat_card.getPointer().traits.cause_burning && !victim.traits.fire_resistant {
            victim.traits.burning = aggressor_owner.stat_card.getPointer().traits.cause_burning
        }
        
        // Spread eternal fire to victim if applicable
        if aggressor.traits.eternal_fire {
            victim.traits.eternal_fire = true
        }
        
        // Cut/Bite victim if should
        if aggressor.traits.biting || (aggressor.traits.cutting && victim.traits.shield <= 0) {
            victim.traits.bleeding = true
        }
        
        // Flimsy
        if aggressor.traits.flimsy {
            aggressor.hp -= aggressor.traits.flimsy
        }
        
        // Passive Cutting
        if victim.traits.passive_cutting {
            aggressor.traits.bleeding = true
        }
        
        // Passive Burning
        if victim.traits.passive_burning && !aggressor.traits.fire_resistant{
            aggressor.traits.burning += victim.traits.passive_burning
        }
        
        just_died bool = victim.isDead() && !victim_was_dead
        
        // Trigger deathcry-adjacent (immediate version)
        if just_died && victim.traits.deathcry_adjacent {
            left *CardInstance = null
            right *CardInstance = null
            
            each CardInstance in static victim_owner.board {
                if it.network_id == victim.network_id {
                    if idx != 0,                            left = victim_owner.board.getPointer(idx - 1)
                    if idx + 1 < victim_owner.board.length, right = victim_owner.board.getPointer(idx + 1)
                    break
                }
            }
            
            if  left,  left.attack += victim.traits.deathcry_adjacent
            if right, right.attack += victim.traits.deathcry_adjacent
            
            if  left, particles.addAttackBonus(left.network_id)
            if right, particles.addAttackBonus(right.network_id)
            
            // Use up deathcry adjacent so it won't apply when the card is removed
            victim.traits.deathcry_adjacent = 0
        }
        
        // Trigger 'on-death' traps
        if just_died, each TrapCardInstance in this.trap_cards {
            if it.rigged == victim.network_id && it.traits.activation.kind == CardActivationKind::ON_DEATH {
                this.doTrap(&it, aggressor, particles, null)
                this.trap_cards.remove(idx--)
            }
        }
        
        // Schedule counter attack
        if victim.traits.counter_attack && !aggressor.traits.ignores_counter_attack && !is_counter_attack {
            this.attack_orders.prepend(attackOrder(victim.network_id, aggressor.network_id, (randomness + 37) % 100, true))
        }
        
        // Succeeded if attack wasn't reflected
        return should_reflect == false
    }
    
    func doSpell(player_id PlayerID, blueprint *CardBlueprint, victim *CardInstance, out particles *<*CardParticle> List, randomness int) successful {
        player *Player = this.getPlayer(player_id)
        is_me bool = player.name == gamedata.player_name
        
        // transform (for spells)
        if blueprint.traits.transform && victim {
            network_id CardNetworkID = victim.network_id
            *victim = cardInstance(gamedata.deck.randomCreatureBlueprintExcluding(victim.name, randomness))
            victim.assignNetworkID(network_id)
            particles.addTransform(network_id)
        }
        
        // applies-shield (for spells)
        if blueprint.traits.applies_shield && victim {
            victim.traits.shield += blueprint.traits.applies_shield
            if particles, particles.addPopupShield(victim.network_id)
        }
        
        // applies-healing (for spells)
        if blueprint.traits.applies_healing && victim && victim.hp < victim.max_hp {
            victim.heal(blueprint.traits.applies_healing)
            if particles, particles.addHealing(victim.network_id)
        }
        
        // applies-attack (for spells)
        if blueprint.traits.applies_attack && victim {
            victim.attack += blueprint.traits.applies_attack
            if particles, particles.addAttackBonus(victim.network_id)
        }
        
        // applies-resistance (for spells)
        if blueprint.traits.applies_resistance && victim {
            victim.traits.resistance += blueprint.traits.applies_resistance
            if particles, particles.addResistance(victim.network_id)
        }
        
        // applies-on-fire (for spells)
        if blueprint.traits.applies_on_fire && victim && !victim.traits.fire_resistant {
            victim.traits.on_fire = true
        }
        
        // gives-eternal-fire (for spells)
        if blueprint.traits.gives_eternal_fire && victim {
            victim.traits.eternal_fire = true
        }
        
        // draw-immediately (for spells)
        if blueprint.traits.draw_immediately {
            if player, player.drawCardsFromDeck(blueprint.traits.draw_immediately, player.name == gamedata.player_name, this.global_mana)
        }
        
        // insta-kill (for spells)
        if blueprint.traits.insta_kill && victim {
            victim.hp = 0
            victim.traits.unhealable = true
            
            if particles, particles.addSmite(victim.network_id)
        }
        
        // attack (for spells)
        if blueprint.attack && victim {
            victim.hp -= blueprint.attack
        }
        
        // everybody-dance-now (for spells)
        if blueprint.traits.everybody_dance_now {
            if blueprint.traits.everybody_dance_now > this.global_dancing,
                this.global_dancing = blueprint.traits.everybody_dance_now
            this.applyDancing(blueprint.traits.everybody_dance_now)
        }
        
        // everybody-burn-now (for spells)
        if blueprint.traits.everybody_burn_now {
            this.applyBurning(blueprint.traits.everybody_burn_now)
        }
        
        // applies-rage (for spells)
        if blueprint.traits.applies_rage {
            victim.traits.rage = true
        }
        
        // steal-random (for spells)
        if blueprint.traits.steal_random && is_me {
            repeat static blueprint.traits.steal_random,
                gamedata.manager.writeOutgoing(gamedata.player_name + "@steal `\n")
        }
        
        // super (for spells)
        if blueprint.traits.super {
            player.super = clamp(player.super + blueprint.traits.super, 0, 100)
        }
        
        // Ignore thrift (for spells) for the playing player because we will
        // have it apply immediately as the player plays the card
        // For good measure, we'll track it on other players though
        if blueprint.traits.thrift {
            unless is_me, player.thrift += blueprint.traits.thrift
        }
        
        // Ignore gives-mana (for spells) for the playing player because we will
        // have it apply immediately as the player plays the card
        // For good measure, we'll track it on other players though
        if blueprint.traits.gives_mana {
            unless is_me, player.mana += blueprint.traits.gives_mana
        }
        
        return true
    }
    
    func addTrap(blueprint *CardBlueprint, rigged CardNetworkID) {
        this.trap_cards.add(trapCardInstance(blueprint, rigged))
    }
    
    func doTrap(trap *TrapCardInstance, aggressor *CardInstance, out particles *<*CardParticle> List, out should_reflect *bool) {
        // Card specific activation animations
        if trap.name == "floor_spikes" {
            particles.addFloorSpikes(trap.rigged)
        } else if trap.name == "reflective_shield" {
            particles.addReflectiveShield(trap.rigged)
        } else if trap.name == "party_popper" {
            particles.addPartyPopper(trap.rigged)
        } else if trap.name == "land_mine" {
            particles.addExplosion(trap.rigged)
        }
        
        // Trap activation message
        particles.addTrap(trap.rigged)
        
        // attack (for traps)
        if trap.attack {
            aggressor.hp = max(aggressor.hp - trap.attack, 0)
        }
        
        // reflect (for traps)
        if trap.traits.reflect {
            if should_reflect != null, *should_reflect = true
        }
        
        // gives-mana (for traps)
        if trap.traits.gives_mana {
            trap_owner *Player = this.findOwner(trap.rigged)
            if trap_owner, trap_owner.future_extra_mana += trap.traits.gives_mana
        }
        
        // trip (for traps)
        if trap.traits.trip {
            aggressor.traits.tripped = true
        }
    }
    
    func applyPassiveEffects(out particles *<*CardParticle> List) {
        each player Player in this.players {
            each CardInstance in player.board {
                // eternal-fire || ((on-fire || burning) && !fire-resistant)  [20% damage or 1]
                if it.traits.eternal_fire || ((it.traits.on_fire || it.traits.burning) && !it.traits.fire_resistant) {
                    unless player.stat_card.has && player.stat_card.getPointer().traits.ignore_effect_damage {
                        it.hp -= (it.max_hp as float / 5.0f < 1.0f ? 1 : floorf(it.max_hp as float / 5.0f) as int)
                    }
                }
                
                // bleeding                                                   [33% damage or 1]
                if it.traits.bleeding {
                    unless player.stat_card.has && player.stat_card.getPointer().traits.ignore_effect_damage {
                        it.hp -= (it.max_hp as float / 3.0f < 1.0f ? 1 : floorf(it.max_hp as float / 3.0f) as int)
                    }
                }
                
                // gains-hp <amount>
                if it.traits.gains_hp != 0 && it.hp > 0 {
                    it.hp += it.traits.gains_hp
                    it.max_hp += it.traits.gains_hp
                    if particles, particles.addHealing(it.network_id)
                }
                
                // gains-attack <amount>
                if it.traits.gains_attack != 0 {
                    it.attack += it.traits.gains_attack
                    if particles, particles.addAttackBonus(it.network_id)
                }
                
                // adjacent-heal <amount>
                if it.traits.adjacent_heal != 0 && !it.isDead() {
                    left *CardInstance = idx == 0 ? null as *CardInstance : player.board.getPointer(idx - 1)
                    right *CardInstance = idx + 1 >= player.board.length ? null as *CardInstance : player.board.getPointer(idx + 1)
                    
                    // Don't allow adjacent-heal to heal "dead" creatures
                    if  left &&  !left.isDead() &&  left.heal(it.traits.adjacent_heal), particles.addHealing(left.network_id)
                    if right && !right.isDead() && right.heal(it.traits.adjacent_heal), particles.addHealing(right.network_id)
                }
            }
            
            // thrift (reset)
            player.thrift = 0
            
            // applies-healing (for stat cards)
            if player.stat_card.has && player.stat_card.getPointer().traits.applies_healing != 0 {
                each CardInstance in player.board {
                    if particles && !it.isDead() && it.heal(player.stat_card.getPointer().traits.applies_healing),
                        particles.addHealing(it.network_id)
                }
            }
        }
    }
    
    func expireOldTraps {
        each TrapCardInstance in this.trap_cards {
            if it.traits.expires != 0 && --it.traits.expires == 0,
                this.trap_cards.remove(idx--)
        }
    }
    
    func getCardStatuses <CardStatus> List {
        list <CardStatus> List
        each player Player in this.players, player.addCardStatusesToList(&list)
        return list.commit()
    }
    
    func removeDeadCards(lose_a_heart_if_none_left bool) {
        this_player *Player = this.getThisPlayer()
        
        removed_network_ids <CardNetworkID> List
        
        each player Player in this.players {
            player.removeDeadCards(&player == this_player, this.global_mana, &removed_network_ids)
            
            // Lose a heart if no creatures left on board
            if lose_a_heart_if_none_left && player.board.length == 0 {
                player.hearts--
                unless gamedata.gamemode.exclusive_heart_mana_bonus, this.global_mana++
            }
        }
        
        // Delete trap cards that were attached to cards
        each removed_id CardNetworkID in static removed_network_ids {
            each TrapCardInstance in this.trap_cards {
                if it.rigged == removed_id, this.trap_cards.remove(idx--)
            }
        }
    }
    
    func findOwner(network_id CardNetworkID) *Player {
        each player Player in this.players {
            each card CardInstance in player.board {
                if card.network_id == network_id, return &player
            }
        }
        return null
    }
    
    func reduceTimedEffects {
        if this.global_dancing > 0, this.global_dancing--
        
        each player Player in static this.players {
            each card CardInstance in static player.board {
                if card.traits.dancing > 0, card.traits.dancing--
                if card.traits.burning > 0, card.traits.burning--
                if card.traits.refund  > 0, card.traits.refund--
            }
        }
    }
    
    func applyDancing(amount int) {
        if amount <= 0, return
        
        each player Player in static this.players {
            each card CardInstance in static player.board {
                if card.traits.dancing < amount, card.traits.dancing = amount
            }
        }
    }
    
    func applyBurning(amount int) {
        if amount <= 0, return
        
        each player Player in static this.players {
            each card CardInstance in static player.board {
                if !card.traits.on_fire && !card.traits.fire_resistant && card.traits.burning < amount, card.traits.burning = amount
            }
        }
    }
    
    func isGameOver bool {
        alive int = 0
        each Player in static this.players, if it.hearts > 0, alive++
        return alive <= 1
    }
}

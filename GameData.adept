
import 'MainMenu.adept'
import 'OnlineMenu.adept'
import 'CreateMenu.adept'
import 'ChooseNameMenu.adept'
import 'LobbyMenu.adept'
import 'CardGame.adept'
import 'VictoryMenu.adept'
import 'DefeatMenu.adept'
import 'FPSMonitor.adept'
import 'GameMode.adept'
import 'OptionsMenu.adept'
import 'ExtrasMenu.adept'
import 'MusicMenu.adept'
import 'SFXMenu.adept'
import 'CreditsMenu.adept'
import 'ProfileMenu.adept'

struct GameData (
    scene *Scene,
    scenes <Scene> List,
    assets_folder String,
    override_host String,
    override_port String,
    listings <RoomListing> List,
    manager NetworkManager,
    interpreter NetworkInterpreter,
    error_message String,
    player_name String,
    is_in_room bool,
    room_name String,
    next_instance_id CardInstanceID,
    deck Deck,
    fps_monitor FPSMonitor,
    player_names <String> List,
    gamemode GameMode
) {
    func init {
        this.scene = null
        this.scenes.addScene( 1, 'mainmenu', new MainMenu)
        this.scenes.addScene( 2, 'onlinemenu', new OnlineMenu)
        this.scenes.addScene( 3, 'createmenu', new CreateMenu)
        this.scenes.addScene( 4, 'choosename', new ChooseNameMenu)
        this.scenes.addScene( 5, 'lobby', new LobbyMenu)
        this.scenes.addScene( 6, 'cardgame', new CardGame)
        this.scenes.addScene( 7, 'victory', new VictoryMenu)
        this.scenes.addScene( 8, 'defeat', new DefeatMenu)
        this.scenes.addScene( 9, 'optionsmenu', new OptionsMenu)
        this.scenes.addScene(10, 'extrasmenu', new ExtrasMenu)
        this.scenes.addScene(11, 'musicmenu', new MusicMenu)
        this.scenes.addScene(12, 'sfxmenu', new SFXMenu)
        this.scenes.addScene(13, 'creditsmenu', new CreditsMenu)
        this.scenes.addScene(14, 'profilemenu', new ProfileMenu)
        this.assets_folder = where() + "assets/"
        this.loadPlayerName()
        this.gamemode.defaults()
        
        this.next_instance_id = 1
        this.manager.initialize(1024)
        this.setScene('mainmenu')
        
        unless this.manager.connect(this.override_host.empty() ? "dockysoft.com" : this.override_host, this.override_port.empty() ? 9999 : this.override_port.toInt(), &this.error_message) {
            print("Failed to connect to server")
            print(this.error_message)
            return
        }
        
        unless this.manager.spawnThreads(false, &this.error_message) {
            print("Failed to spawn threads")
            print(this.error_message)
            return
        }
        
        this.interpreter.start(&this.manager)
        
        if this.player_name == "" {
            #unless auto_name
                // Make player to choose a name before going to mainmenu
                this.setScene('choosename')
            #else
                this.player_name = toString(&gamedata as int)
                print("AUTONAME: '%'" % this.player_name)
                
                gamedata.manager.writeOutgoing("$name " + this.player_name + "\n")
            #end
        } else {
            this.manager.writeOutgoing("$name " + this.player_name + "\n")
        }
    }
    
    func loadDeck successful {
        unless this.deck.load() {
            print("Failed to load deck")
            return false
        }
        return true
    }
    
    func exit {
        if this.is_in_room, this.manager.writeOutgoing("$leave\n")
        this.manager.writeOutgoing("\n")
        
        this.interpreter.stop()
        
        unless this.manager.stop(true, &this.error_message) {
            print("Failed to stop network manager")
            print(this.error_message)
            return
        }
    }
    
    func setScene(id int){
        // Lazy search to find correct scene
        each Scene in this.scenes, if it.id == id {
            if this.scene, this.scene.callExit()
            this.scene = &it
            this.scene.callEnter()
        }
    }
    
    func setScene(name *ubyte){
        // Lazy search to find correct scene
        each Scene in this.scenes, if strcmp(it.name, name) == 0 {
            if this.scene, this.scene.callExit()
            this.scene = &it
            this.scene.callEnter()
        }
    }
    
    func step {
        #if monitor_fps
        this.fps_monitor.step()
            
        if this.fps_monitor.updatedFPS(undef fps int) {
            print("FPS : %" % fps)
        }
        #end
        
        if this.scene, this.scene.callStep()
    }
    
    func click(x, y float, button int) {
        if this.scene, this.scene.callClick(x, y, button)
    }
    
    func release(x, y float, button int){
        if this.scene, this.scene.callRelease(x, y, button)
    }
    
    func key(key, scancode, action, mods int) {
        if this.scene, this.scene.callKey(key, scancode, action, mods)
    }
    
    func char(c uint) {
        if this.scene, this.scene.callChar(c)
    }
    
    func scroll(x, y float) {
        if this.scene, this.scene.callScroll(x, y)
    }
    
    func draw {
        if this.scene, this.scene.callDraw()
    }
    
    func loadPlayerName {
        this.player_name = ""
        
        #unless ignore_NAME_txt
            filename String = where() + "NAME.txt"
            filename_cstr *ubyte = filename.cstr()
            defer delete filename_cstr
            
            f *FILE = fopen(filename_cstr, 'r')
            unless f, return
            
            buffer_length usize = 256
            buffer *ubyte = new ubyte * buffer_length
            defer delete buffer
            unless fgets(buffer, buffer_length, f), fclose(f); return
            
            this.player_name = stringConstant(buffer).trimmed()
            fclose(f)
        #end
    }
    
    func storePlayerName(name String) successful {
        #unless ignore_NAME_txt
            filename String = where() + "NAME.txt"
            filename_cstr *ubyte = filename.cstr()
            defer delete filename_cstr
            
            name.trim()
            name_cstr *ubyte = name.cstr()
            defer delete name_cstr
            
            f *FILE = fopen(filename_cstr, 'w')
            unless f, return false
            
            fputs(name_cstr, f)
            fclose(f)
        #end
        
        return true
    }
    
    func leaveRoom {
        if this.is_in_room {
            this.manager.writeOutgoing("$leave\n")
            this.is_in_room = false
        }
    }
}

gamedata GameData
